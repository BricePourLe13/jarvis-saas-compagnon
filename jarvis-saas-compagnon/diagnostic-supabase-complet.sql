-- ===========================================
-- üîç DIAGNOSTIC COMPLET SUPABASE - JARVIS
-- ===========================================
-- √Ä ex√©cuter dans: Dashboard Supabase > SQL Editor
-- But: Diagnostiquer probl√®me "Invalid login credentials"

DO $$
BEGIN
    RAISE NOTICE 'üîç ===========================================';
    RAISE NOTICE 'üîç DIAGNOSTIC SUPABASE COMPLET - D√âMARRAGE';
    RAISE NOTICE 'üîç ===========================================';
END $$;

-- ===========================================
-- 1. üìä INFORMATIONS G√âN√âRALES DATABASE
-- ===========================================
SELECT 
    'üìä DATABASE INFO' as section,
    current_database() as database_name,
    current_user as current_user,
    version() as postgres_version,
    now() as current_timestamp;

-- ===========================================
-- 2. üîê CONFIGURATION AUTH SUPABASE
-- ===========================================
-- Note: Ces tables sont dans le sch√©ma 'auth' si accessible
SELECT 
    'üîê AUTH CONFIG' as section,
    'Tentative lecture config auth...' as status;

-- Essayer de lire les utilisateurs auth (peut √©chouer selon permissions)
DO $$
BEGIN
    BEGIN
        -- Compter les utilisateurs dans auth.users
        RAISE NOTICE 'üë• Nombre utilisateurs auth.users: %', (SELECT count(*) FROM auth.users);
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Impossible acc√©der auth.users: %', SQLERRM;
    END;
END $$;

-- ===========================================
-- 3. üë• ANALYSE TABLE USERS (public.users)
-- ===========================================
SELECT 
    'üë• PUBLIC USERS ANALYSIS' as section,
    count(*) as total_users,
    count(*) FILTER (WHERE is_active = true) as active_users,
    count(*) FILTER (WHERE is_active = false) as inactive_users,
    count(*) FILTER (WHERE role = 'super_admin') as super_admins,
    count(*) FILTER (WHERE role = 'franchise_owner') as franchise_owners,
    count(*) FILTER (WHERE role = 'franchise_admin') as franchise_admins
FROM users;

-- D√©tails des utilisateurs
SELECT 
    'üë§ USER DETAILS' as section,
    email,
    full_name,
    role,
    is_active,
    last_login_at,
    created_at,
    updated_at
FROM users
ORDER BY created_at DESC;

-- ===========================================
-- 4. üóÇÔ∏è STRUCTURE TABLES
-- ===========================================
SELECT 
    'üóÇÔ∏è TABLES STRUCTURE' as section,
    schemaname,
    tablename,
    tableowner
FROM pg_tables 
WHERE schemaname IN ('public', 'auth')
ORDER BY schemaname, tablename;

-- Colonnes de la table users
SELECT 
    'üìã USERS TABLE COLUMNS' as section,
    column_name,
    data_type,
    is_nullable,
    column_default
FROM information_schema.columns 
WHERE table_name = 'users' AND table_schema = 'public'
ORDER BY ordinal_position;

-- ===========================================
-- 5. üîë ENUM TYPES
-- ===========================================
SELECT 
    'üîë ENUM TYPES' as section,
    t.typname as enum_name,
    string_agg(e.enumlabel, ', ' ORDER BY e.enumsortorder) as enum_values
FROM pg_type t 
JOIN pg_enum e ON t.oid = e.enumtypid  
WHERE t.typname LIKE '%role%' OR t.typname LIKE '%status%'
GROUP BY t.typname;

-- ===========================================
-- 6. üõ°Ô∏è RLS POLICIES
-- ===========================================
SELECT 
    'üõ°Ô∏è RLS POLICIES' as section,
    schemaname,
    tablename,
    policyname,
    permissive,
    roles,
    cmd,
    qual,
    with_check
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- ===========================================
-- 7. üîç RECHERCHE UTILISATEUR SP√âCIFIQUE
-- ===========================================
-- Recherche par email (remplace par ton email)
DO $$
DECLARE
    target_email TEXT := 'brice@jarvis-group.net'; -- CHANGE TON EMAIL ICI
    user_record RECORD;
BEGIN
    RAISE NOTICE 'üîç ===========================================';
    RAISE NOTICE 'üîç RECHERCHE UTILISATEUR: %', target_email;
    RAISE NOTICE 'üîç ===========================================';
    
    -- Recherche dans public.users
    SELECT * INTO user_record FROM users WHERE email = target_email;
    
    IF FOUND THEN
        RAISE NOTICE '‚úÖ Trouv√© dans public.users:';
        RAISE NOTICE '   ID: %', user_record.id;
        RAISE NOTICE '   Email: %', user_record.email;
        RAISE NOTICE '   Nom: %', user_record.full_name;
        RAISE NOTICE '   R√¥le: %', user_record.role;
        RAISE NOTICE '   Actif: %', user_record.is_active;
        RAISE NOTICE '   Derni√®re connexion: %', user_record.last_login_at;
        RAISE NOTICE '   Cr√©√©: %', user_record.created_at;
    ELSE
        RAISE NOTICE '‚ùå UTILISATEUR NON TROUV√â dans public.users';
    END IF;
    
    -- Tentative recherche dans auth.users (peut √©chouer)
    BEGIN
        EXECUTE format('SELECT count(*) FROM auth.users WHERE email = %L', target_email) INTO user_record;
        RAISE NOTICE 'üë§ Pr√©sent dans auth.users: % occurence(s)', user_record.count;
    EXCEPTION WHEN OTHERS THEN
        RAISE NOTICE '‚ùå Impossible v√©rifier auth.users: %', SQLERRM;
    END;
END $$;

-- ===========================================
-- 8. üìß ANALYSE DES INVITATIONS
-- ===========================================
-- Chercher des traces d'invitations r√©centes
SELECT 
    'üìß RECENT LOGS' as section,
    type,
    details,
    timestamp
FROM jarvis_errors_log 
WHERE type LIKE '%invitation%' OR type LIKE '%auth%'
ORDER BY timestamp DESC 
LIMIT 10;

-- ===========================================
-- 9. üîß CONFIGURATION SUGGESTIONS
-- ===========================================
DO $$
BEGIN
    RAISE NOTICE 'üîß ===========================================';
    RAISE NOTICE 'üîß SUGGESTIONS DE CONFIGURATION';
    RAISE NOTICE 'üîß ===========================================';
    
    -- V√©rifier RLS activ√©
    IF EXISTS(SELECT 1 FROM pg_tables WHERE tablename = 'users' AND rowsecurity = true) THEN
        RAISE NOTICE '‚úÖ RLS activ√© sur table users';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  RLS potentiellement d√©sactiv√© sur table users';
    END IF;
    
    -- Compter les super admins
    IF (SELECT count(*) FROM users WHERE role = 'super_admin' AND is_active = true) = 0 THEN
        RAISE NOTICE 'üö® AUCUN SUPER ADMIN ACTIF trouv√© !';
    ELSE
        RAISE NOTICE '‚úÖ Super admin(s) actif(s) trouv√©(s)';
    END IF;
    
    RAISE NOTICE 'üîß ===========================================';
    RAISE NOTICE 'üîß FIN DU DIAGNOSTIC';
    RAISE NOTICE 'üîß ===========================================';
END $$;

-- ===========================================
-- 10. üö® ACTIONS RECOMMAND√âES
-- ===========================================
SELECT 
    'üö® NEXT STEPS' as section,
    'V√©rifiez les r√©sultats ci-dessus et cherchez:' as instructions UNION ALL
SELECT 
    'üö® NEXT STEPS' as section,
    '1. Votre email dans public.users' as instructions UNION ALL
SELECT 
    'üö® NEXT STEPS' as section,
    '2. is_active = true pour votre compte' as instructions UNION ALL
SELECT 
    'üö® NEXT STEPS' as section,
    '3. role = super_admin correct' as instructions UNION ALL
SELECT 
    'üö® NEXT STEPS' as section,
    '4. Policies RLS qui pourraient bloquer' as instructions;