-- ü§ñ MONITORING SP√âCIFIQUE JARVIS - IA, WebRTC, Sessions
-- Tables et m√©triques adapt√©es aux besoins r√©els JARVIS

-- ====================================
-- ü§ñ TABLE: jarvis_ai_metrics (M√©triques IA)
-- ====================================

CREATE TABLE IF NOT EXISTS jarvis_ai_metrics (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  gym_id UUID NOT NULL REFERENCES gyms(id) ON DELETE CASCADE,
  kiosk_slug TEXT NOT NULL,
  session_id UUID, -- Lien vers jarvis_sessions
  
  -- ü§ñ Mod√®le IA utilis√©
  ai_model TEXT NOT NULL, -- 'gpt-4o-realtime', 'gpt-4o', 'gpt-4-turbo', etc.
  ai_provider TEXT DEFAULT 'openai', -- 'openai', 'anthropic', etc.
  
  -- ‚ö° Performance IA
  api_response_time_ms INTEGER, -- Temps r√©ponse API
  tokens_input INTEGER, -- Tokens envoy√©s
  tokens_output INTEGER, -- Tokens re√ßus
  cost_usd DECIMAL(10,6), -- Co√ªt exact de la requ√™te
  
  -- üéØ Qualit√© Interaction
  response_quality TEXT CHECK (response_quality IN ('excellent', 'good', 'fair', 'poor')),
  user_satisfaction INTEGER CHECK (user_satisfaction BETWEEN 1 AND 5),
  conversation_success BOOLEAN, -- Session compl√©t√©e avec succ√®s
  
  -- üö® Erreurs IA
  error_occurred BOOLEAN DEFAULT false,
  error_type TEXT, -- 'timeout', 'quota_exceeded', 'model_error', 'network_error'
  error_message TEXT,
  retry_count INTEGER DEFAULT 0,
  
  -- ‚è∞ Timeline
  started_at TIMESTAMPTZ NOT NULL,
  completed_at TIMESTAMPTZ,
  duration_ms INTEGER, -- Dur√©e totale de l'interaction
  
  -- üìä M√©tadonn√©es
  request_metadata JSONB DEFAULT '{}'::jsonb,
  response_metadata JSONB DEFAULT '{}'::jsonb,
  
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- ====================================
-- üéôÔ∏è TABLE: jarvis_webrtc_metrics (WebRTC Audio)
-- ====================================

CREATE TABLE IF NOT EXISTS jarvis_webrtc_metrics (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  gym_id UUID NOT NULL REFERENCES gyms(id) ON DELETE CASCADE,
  kiosk_slug TEXT NOT NULL,
  session_id UUID, -- Lien vers jarvis_sessions
  
  -- üîä Qualit√© Audio
  audio_input_level DECIMAL(5,2), -- Niveau micro (0-100)
  audio_output_level DECIMAL(5,2), -- Volume speakers (0-100)
  audio_quality_score DECIMAL(3,2), -- Score qualit√© global (0-1)
  
  -- üåê Connexion WebRTC
  connection_quality TEXT CHECK (connection_quality IN ('excellent', 'good', 'fair', 'poor')),
  ice_connection_state TEXT, -- 'connected', 'disconnected', 'failed', etc.
  peer_connection_state TEXT,
  
  -- üìä Statistiques R√©seau
  rtt_ms INTEGER, -- Round Trip Time
  packets_lost INTEGER, -- Paquets perdus
  jitter_ms DECIMAL(8,2), -- Variation d√©lai
  bandwidth_kbps INTEGER, -- Bande passante utilis√©e
  
  -- üé§ Reconnaissance Vocale
  speech_recognition_accuracy DECIMAL(5,2), -- Pr√©cision reconnaissance (%)
  speech_interruptions INTEGER, -- Nombre d'interruptions
  silence_detection_quality TEXT CHECK (silence_detection_quality IN ('excellent', 'good', 'fair', 'poor')),
  
  -- üö® Probl√®mes D√©tect√©s
  audio_dropouts INTEGER, -- Coupures audio
  echo_detected BOOLEAN, -- √âcho d√©tect√©
  noise_level TEXT CHECK (noise_level IN ('low', 'medium', 'high')),
  
  -- ‚è∞ Dur√©e
  session_duration_ms INTEGER,
  active_talk_time_ms INTEGER, -- Temps de parole effectif
  
  -- üîß Infos Technique
  browser_info JSONB DEFAULT '{}'::jsonb,
  device_info JSONB DEFAULT '{}'::jsonb,
  
  measured_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  created_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- ====================================
-- üë• TABLE: jarvis_user_interactions (Interactions Utilisateurs)
-- ====================================

CREATE TABLE IF NOT EXISTS jarvis_user_interactions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  gym_id UUID NOT NULL REFERENCES gyms(id) ON DELETE CASCADE,
  kiosk_slug TEXT NOT NULL,
  session_id UUID, -- Lien vers jarvis_sessions
  
  -- üë§ Identification Utilisateur
  member_badge_id TEXT, -- ID badge RFID
  member_type TEXT CHECK (member_type IN ('member', 'visitor', 'staff', 'unknown')),
  is_returning_user BOOLEAN, -- Utilisateur r√©current
  
  -- üéØ Type d'Interaction
  interaction_type TEXT NOT NULL, -- 'info_request', 'booking', 'complaint', 'general_chat', etc.
  intent_detected TEXT[], -- Intents IA d√©tect√©s
  conversation_topic TEXT[], -- Sujets abord√©s
  
  -- üìä D√©roulement Session
  session_started_at TIMESTAMPTZ NOT NULL,
  session_ended_at TIMESTAMPTZ,
  total_duration_seconds INTEGER,
  user_talk_time_seconds INTEGER, -- Temps o√π l'utilisateur parle
  jarvis_talk_time_seconds INTEGER, -- Temps o√π JARVIS parle
  
  -- üé≠ Sentiment & Satisfaction
  initial_sentiment DECIMAL(3,2), -- Sentiment au d√©but (-1 √† 1)
  final_sentiment DECIMAL(3,2), -- Sentiment √† la fin
  satisfaction_rating INTEGER CHECK (satisfaction_rating BETWEEN 1 AND 5),
  nps_score INTEGER CHECK (nps_score BETWEEN 0 AND 10), -- Net Promoter Score
  
  -- ‚úÖ R√©sultat Session
  session_completed BOOLEAN, -- Session termin√©e normalement
  user_goal_achieved BOOLEAN, -- Objectif utilisateur atteint
  escalation_required BOOLEAN, -- Besoin intervention humaine
  
  -- üö™ Raison de Fin
  end_reason TEXT CHECK (end_reason IN (
    'user_satisfied', 'user_left', 'timeout', 'technical_error', 
    'escalated_to_staff', 'jarvis_error', 'user_frustrated'
  )),
  
  -- üìù Feedback
  user_feedback TEXT, -- Commentaire utilisateur optionnel
  issue_resolved BOOLEAN, -- Probl√®me r√©solu
  
  -- üìä M√©tadonn√©es
  conversation_summary TEXT, -- R√©sum√© auto-g√©n√©r√©
  action_items TEXT[], -- Actions √† suivre
  member_info JSONB DEFAULT '{}'::jsonb,
  
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- ====================================
-- üí∞ TABLE: jarvis_cost_tracking (Suivi Co√ªts Pr√©cis)
-- ====================================

CREATE TABLE IF NOT EXISTS jarvis_cost_tracking (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  gym_id UUID NOT NULL REFERENCES gyms(id) ON DELETE CASCADE,
  kiosk_slug TEXT NOT NULL,
  
  -- üìÖ P√©riode
  date DATE NOT NULL,
  hour INTEGER CHECK (hour BETWEEN 0 AND 23),
  
  -- ü§ñ Utilisation IA
  total_sessions INTEGER DEFAULT 0,
  successful_sessions INTEGER DEFAULT 0,
  failed_sessions INTEGER DEFAULT 0,
  
  -- üí∞ Co√ªts D√©taill√©s
  total_cost_usd DECIMAL(10,6) DEFAULT 0,
  input_tokens_cost_usd DECIMAL(10,6) DEFAULT 0,
  output_tokens_cost_usd DECIMAL(10,6) DEFAULT 0,
  realtime_api_cost_usd DECIMAL(10,6) DEFAULT 0, -- Co√ªt sp√©cifique real-time
  
  -- üìä Tokens Consomm√©s
  total_input_tokens BIGINT DEFAULT 0,
  total_output_tokens BIGINT DEFAULT 0,
  avg_tokens_per_session DECIMAL(10,2),
  
  -- ‚ö° Performance
  avg_response_time_ms INTEGER,
  max_response_time_ms INTEGER,
  min_response_time_ms INTEGER,
  
  -- üéØ Mod√®les Utilis√©s
  models_used JSONB DEFAULT '{}'::jsonb, -- {"gpt-4o": 15, "gpt-4": 3}
  
  -- üìà M√©tadonn√©es
  peak_hour_sessions INTEGER,
  cost_per_session_avg_usd DECIMAL(8,4),
  
  created_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
  
  -- Contrainte unique par gym/date/heure
  UNIQUE(gym_id, date, hour)
);

-- ====================================
-- üìä INDEXES POUR PERFORMANCE
-- ====================================

-- Indexes jarvis_ai_metrics
CREATE INDEX IF NOT EXISTS idx_jarvis_ai_metrics_gym_id ON jarvis_ai_metrics(gym_id);
CREATE INDEX IF NOT EXISTS idx_jarvis_ai_metrics_started_at ON jarvis_ai_metrics(started_at);
CREATE INDEX IF NOT EXISTS idx_jarvis_ai_metrics_model ON jarvis_ai_metrics(ai_model);
CREATE INDEX IF NOT EXISTS idx_jarvis_ai_metrics_session_id ON jarvis_ai_metrics(session_id);

-- Indexes webrtc_metrics
CREATE INDEX IF NOT EXISTS idx_jarvis_webrtc_metrics_gym_id ON jarvis_webrtc_metrics(gym_id);
CREATE INDEX IF NOT EXISTS idx_jarvis_webrtc_metrics_measured_at ON jarvis_webrtc_metrics(measured_at);
CREATE INDEX IF NOT EXISTS idx_jarvis_webrtc_metrics_session_id ON jarvis_webrtc_metrics(session_id);

-- Indexes user_interactions
CREATE INDEX IF NOT EXISTS idx_jarvis_user_interactions_gym_id ON jarvis_user_interactions(gym_id);
CREATE INDEX IF NOT EXISTS idx_jarvis_user_interactions_started_at ON jarvis_user_interactions(session_started_at);
CREATE INDEX IF NOT EXISTS idx_jarvis_user_interactions_member_badge ON jarvis_user_interactions(member_badge_id);
CREATE INDEX IF NOT EXISTS idx_jarvis_user_interactions_session_id ON jarvis_user_interactions(session_id);

-- Indexes cost_tracking
CREATE INDEX IF NOT EXISTS idx_jarvis_cost_tracking_gym_date ON jarvis_cost_tracking(gym_id, date);
CREATE INDEX IF NOT EXISTS idx_jarvis_cost_tracking_date_hour ON jarvis_cost_tracking(date, hour);

-- ====================================
-- üîí ROW LEVEL SECURITY
-- ====================================

-- Activer RLS
ALTER TABLE jarvis_ai_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE jarvis_webrtc_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE jarvis_user_interactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE jarvis_cost_tracking ENABLE ROW LEVEL SECURITY;

-- Politiques d'acc√®s
CREATE POLICY "Allow all operations on jarvis_ai_metrics" ON jarvis_ai_metrics FOR ALL USING (true);
CREATE POLICY "Allow all operations on jarvis_webrtc_metrics" ON jarvis_webrtc_metrics FOR ALL USING (true);
CREATE POLICY "Allow all operations on jarvis_user_interactions" ON jarvis_user_interactions FOR ALL USING (true);
CREATE POLICY "Allow all operations on jarvis_cost_tracking" ON jarvis_cost_tracking FOR ALL USING (true);

-- ====================================
-- ü§ñ TRIGGERS
-- ====================================

-- Trigger pour updated_at
CREATE TRIGGER update_jarvis_user_interactions_updated_at
  BEFORE UPDATE ON jarvis_user_interactions
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_jarvis_cost_tracking_updated_at
  BEFORE UPDATE ON jarvis_cost_tracking
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- ====================================
-- üëÅÔ∏è VUES DASHBOARD JARVIS
-- ====================================

-- Vue monitoring IA temps r√©el
CREATE OR REPLACE VIEW v_jarvis_ai_status AS
SELECT 
  g.id as gym_id,
  g.name as gym_name,
  g.kiosk_config->>'kiosk_url_slug' as kiosk_slug,
  
  -- Sessions derni√®re heure
  (SELECT COUNT(*) FROM jarvis_ai_metrics jam 
   WHERE jam.gym_id = g.id 
   AND jam.started_at > now() - INTERVAL '1 hour') as sessions_last_hour,
   
  -- Performance IA r√©cente
  (SELECT AVG(jam.api_response_time_ms) FROM jarvis_ai_metrics jam 
   WHERE jam.gym_id = g.id 
   AND jam.started_at > now() - INTERVAL '1 hour') as avg_response_time_ms,
   
  -- Co√ªt aujourd'hui
  (SELECT SUM(jam.cost_usd) FROM jarvis_ai_metrics jam 
   WHERE jam.gym_id = g.id 
   AND jam.started_at::date = CURRENT_DATE) as cost_today_usd,
   
  -- Taux de succ√®s r√©cent
  (SELECT 
    (COUNT(CASE WHEN jam.conversation_success THEN 1 END) * 100.0 / NULLIF(COUNT(*), 0))
   FROM jarvis_ai_metrics jam 
   WHERE jam.gym_id = g.id 
   AND jam.started_at > now() - INTERVAL '24 hours') as success_rate_24h,
   
  -- Erreurs r√©centes
  (SELECT COUNT(*) FROM jarvis_ai_metrics jam 
   WHERE jam.gym_id = g.id 
   AND jam.error_occurred = true
   AND jam.started_at > now() - INTERVAL '1 hour') as errors_last_hour,
   
  -- Qualit√© WebRTC moyenne
  (SELECT AVG(jwm.audio_quality_score) FROM jarvis_webrtc_metrics jwm 
   WHERE jwm.gym_id = g.id 
   AND jwm.measured_at > now() - INTERVAL '1 hour') as avg_audio_quality,
   
  -- Satisfaction utilisateurs r√©cente
  (SELECT AVG(jui.satisfaction_rating) FROM jarvis_user_interactions jui 
   WHERE jui.gym_id = g.id 
   AND jui.session_started_at > now() - INTERVAL '24 hours'
   AND jui.satisfaction_rating IS NOT NULL) as avg_satisfaction_24h

FROM gyms g
WHERE g.kiosk_config->>'kiosk_url_slug' IS NOT NULL;

-- ====================================
-- ‚úÖ VALIDATION
-- ====================================

SELECT 
  'ü§ñ MONITORING JARVIS SP√âCIFIQUE CR√â√â!' as result,
  'Tables: jarvis_ai_metrics, jarvis_webrtc_metrics, jarvis_user_interactions, jarvis_cost_tracking' as tables_created,
  'Vue: v_jarvis_ai_status' as view_created,
  now() as created_at;