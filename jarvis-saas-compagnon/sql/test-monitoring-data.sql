-- ðŸ§ª TEST MONITORING - InsÃ©rer donnÃ©es de dÃ©monstration
-- Script pour tester le systÃ¨me avec des donnÃ©es rÃ©alistes

-- ====================================
-- ðŸ“Š INSÃ‰RER MÃ‰TRIQUES DE TEST
-- ====================================

-- InsÃ©rer des mÃ©triques pour chaque kiosk configurÃ©
INSERT INTO kiosk_metrics (
  gym_id, 
  kiosk_slug, 
  cpu_usage, 
  memory_usage, 
  network_latency, 
  api_response_time,
  microphone_level,
  speaker_volume,
  audio_quality,
  temperature_cpu,
  collected_at
)
SELECT 
  g.id,
  g.kiosk_config->>'kiosk_url_slug',
  
  -- MÃ©triques systÃ¨me rÃ©alistes
  (random() * 25 + 35)::DECIMAL(5,2), -- CPU entre 35-60%
  (random() * 30 + 45)::DECIMAL(5,2), -- RAM entre 45-75%
  (random() * 120 + 80)::INTEGER,     -- Latence entre 80-200ms
  (random() * 800 + 1200)::INTEGER,   -- API entre 1.2-2s
  
  -- Audio
  (random() * 20 + 70)::DECIMAL(5,2), -- Micro 70-90%
  (random() * 15 + 80)::DECIMAL(5,2), -- Volume 80-95%
  CASE (random() * 4)::INTEGER
    WHEN 0 THEN 'excellent'
    WHEN 1 THEN 'good'
    WHEN 2 THEN 'good'
    ELSE 'excellent'
  END,
  
  -- TempÃ©rature
  (random() * 15 + 45)::INTEGER,      -- Temp entre 45-60Â°C
  
  -- Timestamp rÃ©cent
  now() - INTERVAL '5 minutes'
  
FROM gyms g 
WHERE g.kiosk_config->>'kiosk_url_slug' IS NOT NULL;

-- ====================================
-- ðŸš¨ INSÃ‰RER QUELQUES ALERTES DE TEST
-- ====================================

-- Alerte warning pour un kiosk (CPU un peu Ã©levÃ©)
INSERT INTO monitoring_alerts (
  gym_id,
  kiosk_slug,
  alert_type,
  severity,
  threshold_value,
  current_value,
  unit,
  title,
  description,
  recommended_action,
  status
)
SELECT 
  g.id,
  g.kiosk_config->>'kiosk_url_slug',
  'cpu_high',
  'warning',
  70.0,
  73.5,
  '%',
  'Utilisation CPU Ã©levÃ©e',
  'Le CPU du kiosk dÃ©passe le seuil de 70%',
  'VÃ©rifier les processus en cours et redÃ©marrer si nÃ©cessaire',
  'active'
FROM gyms g 
WHERE g.kiosk_config->>'kiosk_url_slug' IS NOT NULL
LIMIT 1;

-- Alerte info pour rÃ©seau lent
INSERT INTO monitoring_alerts (
  gym_id,
  kiosk_slug,
  alert_type,
  severity,
  threshold_value,
  current_value,
  unit,
  title,
  description,
  recommended_action,
  status
)
SELECT 
  g.id,
  g.kiosk_config->>'kiosk_url_slug',
  'network_slow',
  'info',
  200.0,
  245.0,
  'ms',
  'Latence rÃ©seau Ã©levÃ©e',
  'La latence rÃ©seau est plus Ã©levÃ©e que la normale',
  'VÃ©rifier la connexion internet',
  'active'
FROM gyms g 
WHERE g.kiosk_config->>'kiosk_url_slug' IS NOT NULL
ORDER BY g.created_at DESC
LIMIT 1;

-- ====================================
-- ðŸ“‹ INCIDENT DE TEST
-- ====================================

-- Incident rÃ©solu rÃ©cemment
INSERT INTO kiosk_incidents (
  gym_id,
  kiosk_slug,
  incident_type,
  severity,
  title,
  description,
  affected_components,
  status,
  resolution_notes,
  detected_at,
  resolved_at,
  duration_minutes,
  sessions_affected
)
SELECT 
  g.id,
  g.kiosk_config->>'kiosk_url_slug',
  'network_issue',
  'medium',
  'Perte connexion temporaire',
  'Le kiosk a perdu la connexion internet pendant quelques minutes',
  ARRAY['network', 'api'],
  'resolved',
  'Connexion rÃ©tablie automatiquement aprÃ¨s redÃ©marrage du routeur',
  now() - INTERVAL '2 hours',
  now() - INTERVAL '1 hour 45 minutes',
  15,
  3
FROM gyms g 
WHERE g.kiosk_config->>'kiosk_url_slug' IS NOT NULL
LIMIT 1;

-- ====================================
-- âœ… VÃ‰RIFICATION DES DONNÃ‰ES INSÃ‰RÃ‰ES
-- ====================================

-- Compter ce qui a Ã©tÃ© insÃ©rÃ©
SELECT 
  'âœ… DONNÃ‰ES DE TEST INSÃ‰RÃ‰ES' as status,
  (SELECT COUNT(*) FROM kiosk_metrics WHERE collected_at > now() - INTERVAL '10 minutes') as new_metrics,
  (SELECT COUNT(*) FROM monitoring_alerts WHERE status = 'active') as active_alerts,
  (SELECT COUNT(*) FROM kiosk_incidents WHERE detected_at > now() - INTERVAL '3 hours') as recent_incidents,
  now() as inserted_at;

-- ====================================
-- ðŸ“Š TESTER LA VUE STATUT
-- ====================================

-- Afficher le statut actuel de tous les kiosks
SELECT 
  'ðŸ“Š STATUT KIOSKS AVEC DONNÃ‰ES TEST' as section,
  gym_name,
  kiosk_slug,
  online_status,
  COALESCE(cpu_usage::text || '%', 'N/A') as cpu,
  COALESCE(memory_usage::text || '%', 'N/A') as memory,
  COALESCE(network_latency::text || 'ms', 'N/A') as latency,
  active_alerts || ' alertes' as alerts,
  last_metrics
FROM v_kiosk_current_status
ORDER BY gym_name;

-- ====================================
-- ðŸŽ¯ REQUÃŠTES DE VALIDATION
-- ====================================

-- 1. MÃ©triques les plus rÃ©centes
SELECT 
  'ðŸŽ¯ MÃ‰TRIQUES RÃ‰CENTES' as test,
  kiosk_slug,
  cpu_usage || '%' as cpu,
  memory_usage || '%' as memory,
  network_latency || 'ms' as latency,
  audio_quality,
  collected_at
FROM kiosk_metrics 
WHERE collected_at > now() - INTERVAL '10 minutes'
ORDER BY collected_at DESC;

-- 2. Alertes actives
SELECT 
  'ðŸš¨ ALERTES ACTIVES' as test,
  kiosk_slug,
  alert_type,
  severity,
  title,
  current_value || unit as value_vs_threshold,
  threshold_value || unit as threshold
FROM monitoring_alerts 
WHERE status = 'active'
ORDER BY severity DESC, triggered_at DESC;

-- 3. Incidents rÃ©cents
SELECT 
  'ðŸ“‹ INCIDENTS RÃ‰CENTS' as test,
  kiosk_slug,
  incident_type,
  severity,
  title,
  status,
  CASE 
    WHEN status = 'resolved' THEN duration_minutes::text || ' min'
    ELSE 'En cours'
  END as duration
FROM kiosk_incidents 
WHERE detected_at > now() - INTERVAL '24 hours'
ORDER BY detected_at DESC;

-- ====================================
-- ðŸ’¡ PROCHAINES Ã‰TAPES
-- ====================================

SELECT 
  'ðŸ’¡ SYSTÃˆME PRÃŠT' as status,
  'Monitoring fonctionnel avec donnÃ©es de test' as description,
  'Utilisez maintenant le MonitoringService en TypeScript' as next_step,
  'ou les requÃªtes de 04-monitoring-dashboard-queries.sql' as alternative;