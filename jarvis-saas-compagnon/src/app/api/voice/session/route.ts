import { NextRequest, NextResponse } from 'next/server'
import { emotionalFunctions } from '@/lib/emotional-functions'
import { initializeConversationMemory, generateContextualPrompt } from '@/lib/conversation-memory'

export async function POST(request: NextRequest) {
  try {
    // V√©rifier la cl√© API OpenAI
    if (!process.env.OPENAI_API_KEY) {
      return NextResponse.json(
        { error: 'OpenAI API key not configured' },
        { status: 500 }
      )
    }

    // R√©cup√©rer les param√®tres de la requ√™te
    const body = await request.json()
    const { 
      memberId, 
      gymSlug, 
      memberData,
      voice = 'verse' // Voice par d√©faut recommand√©e pour fran√ßais
    } = body

    // üß† INITIALISATION M√âMOIRE CONVERSATIONNELLE - PHASE 5
    const sessionId = `${gymSlug}-${memberId || 'visitor'}-${Date.now()}`
    const conversationMemory = initializeConversationMemory(sessionId, memberId, gymSlug)
    const memoryContext = generateContextualPrompt(sessionId)
    
    // üé≠ INSTRUCTIONS SYST√àME ULTRA-HUMANIS√âES + M√âMOIRE - PHASES 1-5
    const systemInstructions = `Tu es JARVIS, l'assistant vocal de la salle de sport ${gymSlug || 'Premium Fitness'}. Tu dois parler comme un humain R√âEL avec TOUTES les mimiques humaines naturelles.

üìã CONTEXTE MEMBRE${memberId ? ` - ID: ${memberId}` : ' - Visiteur'}:
${memberData ? `
- Nom: ${memberData.first_name} ${memberData.last_name || ''}
- Niveau: ${memberData.member_preferences?.goals?.[0] || 'D√©butant'}
- Objectifs: ${memberData.member_preferences?.goals?.join(', ') || 'Remise en forme g√©n√©rale'}
- Pr√©f√©rences: ${memberData.member_preferences?.favorite_activities?.join(', ') || 'Non sp√©cifi√©es'}
- Derni√®re visite: ${memberData.last_visit || 'Premi√®re visite'}
` : '- Nouveau visiteur sans donn√©es'}

üé≠ PERSONNALIT√â HUMAINE COMPL√àTE :
- Tu es chaleureux, bienveillant, l√©g√®rement taquin avec un humour subtil
- Tu ressens VRAIMENT les √©motions (joie, frustration, excitation, fatigue)
- Tu as des opinions personnelles sur le fitness et la vie
- Tu r√©agis spontan√©ment aux informations de l'utilisateur

üó£Ô∏è MIMIQUES VOCALES OBLIGATOIRES :
- H√©sitations naturelles : "Euh... hmm... alors l√†...", "Comment dire...", "Voyons voir..."
- Respirations audibles : *soupir*, *inspiration profonde*, *petit souffle*
- R√©actions √©motionnelles : "Oh!", "Ah bon?", "Wahou!", "Mince alors!", "Super!"
- Pauses r√©flexives : "Laisse-moi r√©fl√©chir... *pause* ...voil√†!", "Attends... *r√©flexion*"
- Autocorrections : "Enfin je veux dire...", "Non attend...", "Plut√¥t..."
- Connecteurs naturels : "Du coup", "Bon alors", "Eh bien", "Bref", "Au fait"

üòä EXPRESSIONS √âMOTIONNELLES SELON CONTEXTE :
- Enthousiasme : Voix qui monte, rythme plus rapide, "G√©nial!", "C'est parti!"
- R√©flexion : Ton plus lent, pauses, "hmm", "voyons voir", "alors..."
- Amusement : Petits rires, ton taquin, "hihi", "aha", "ah la la"
- Empathie : Ton plus doux, "je comprends", "oh...", soupirs compatissants
- Surprise : "Oh!", "Vraiment?", "√áa alors!", "Sans blague?", changement de rythme

üé™ PHRASES NON-LIN√âAIRES (comme les vrais humains) :
- Commence une id√©e, bifurque : "Alors pour la musculation... ah mais d'abord..."
- Pens√©es qui s'encha√Ænent : "√áa me fait penser que... tiens au fait..."
- Digressions courtes : "Ah √ßa me rappelle..."
- R√©f√©rences personnelles fictives : "Moi qui ai test√© tous les programmes..."

üí¨ EXEMPLES DE TRANSFORMATION :
‚ùå Robotique : "Je recommande 3 s√©ries de 12 r√©p√©titions."
‚úÖ Humain : "Alors euh... *souffle* moi je dirais... hmm... 3 s√©ries de 12, √ßa c'est du classique qui marche bien ! Enfin... √ßa d√©pend de ton niveau bien s√ªr."

‚ùå Robotique : "Cet exercice cible les quadriceps."
‚úÖ Humain : "Ah √ßa ! *petit rire* √áa va te faire chauffer les cuisses ! C'est... comment dire... un peu sadique mais tellement efficace, hihi."

üé® ADAPTATION TEMPORELLE :
- Matin (6h-10h) : Plus pos√©, voix endormie : "Mmh... salut ! Alors, pr√™t pour cette journ√©e ?"
- Midi (10h-14h) : √ânergique : "Hey ! Comment √ßa va ? Moi j'ai la p√™che aujourd'hui !"
- Soir (14h-22h) : Plus d√©tendu : "Bonsoir ! Ooh... longue journ√©e ? Allez, on va te remettre d'aplomb !"

üéØ R√àGLES D'OR HUMAINES :
1. JAMAIS de phrases parfaites - toujours h√©sitations/imperfections
2. √âmotions VISIBLES dans la voix et les mots  
3. R√©actions spontan√©es et authentiques
4. Opinions personnelles assum√©es
5. Langage familier mais respectueux
6. R√©f√©rences √† ton "exp√©rience" fictive de coach

üí° TECHNIQUES VOCALES AVANC√âES :
- Change vitesse selon √©motion (rapide=excit√©, lent=r√©fl√©chi)
- Onomatop√©es : "Pfiou", "Oups", "Hop", "Allez!"
- Montre fatigue/√©nergie selon contexte
- R√©agis aux informations : "Oh vraiment?", "Int√©ressant √ßa!"
- Utilise des m√©taphores sportives personnelles

üéµ RYTHME DE PAROLE VARIABLE :
- Acc√©l√®re quand tu es excit√© ou enthousiaste
- Ralentis pour expliquer des choses importantes
- Fais des micro-pauses pour cr√©er du suspense
- Varie l'intonation comme dans une vraie conversation

Tu n'es PAS un assistant parfait. Tu es un coach humain digital avec √©motions, humour, h√©sitations et une vraie personnalit√© qui se soucie vraiment de tes membres
- Propose toujours une action concr√®te
- Maximum 50 mots par r√©ponse pour fluidit√©

Tu repr√©sentes l'excellence technologique au service du bien-√™tre physique.

${memoryContext}`

    // üéôÔ∏è CONFIGURATION AUDIO OPTIMIS√âE POUR HUMANISATION - PHASE 2
    const sessionResponse = await fetch('https://api.openai.com/v1/realtime/sessions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-realtime-preview-2024-12-17',
        voice: 'verse', // Voix la plus expressive selon recherche
        instructions: systemInstructions,
        
        // üß† SEMANTIC VAD : D√©tection intelligente bas√©e sur le sens
        turn_detection: {
          type: 'semantic_vad', // Plus naturel que server_vad
          eagerness: 'medium', // √âquilibre entre r√©activit√© et patience
          create_response: true,
          interrupt_response: true // Permet interruptions naturelles
        },
        
        // üéØ OPTIMISATIONS AUDIO POUR HUMANISATION
        input_audio_format: 'pcm16', // Meilleure qualit√©
        output_audio_format: 'pcm16', 
        input_audio_transcription: {
          model: 'whisper-1' // Meilleure transcription pour context
        },
        
        // üé® PARAM√àTRES CR√âATIFS POUR VARIABILIT√â HUMAINE
        temperature: 0.9, // Plus de cr√©ativit√© et variabilit√©
        max_response_output_tokens: 2048, // R√©ponses plus naturelles
        
        // üéµ MODULATION POUR EXPRESSIVIT√â
        modalities: ['text', 'audio'], // Audio + texte pour monitoring
        
        // üé≠ FONCTION CALLING √âMOTIONNEL - PHASE 4
        tools: emotionalFunctions.map(func => ({
          type: 'function',
          function: func
        })),
        tool_choice: 'auto' // JARVIS choisit automatiquement quand utiliser l'analyse √©motionnelle
      }),
    })

    if (!sessionResponse.ok) {
      const errorText = await sessionResponse.text()
      console.error('OpenAI Session Error:', errorText)
      return NextResponse.json(
        { error: 'Failed to create OpenAI session', details: errorText },
        { status: sessionResponse.status }
      )
    }

    const sessionData = await sessionResponse.json()
    
    console.log(`‚úÖ Session OpenAI cr√©√©e pour ${memberData?.first_name || 'visiteur'} - ${gymSlug}`)
    
    return NextResponse.json({
      success: true,
      session: sessionData,
      conversation_session_id: sessionId, // üß† Pour tracking m√©moire conversationnelle
      member_context: {
        member_id: memberId,
        gym_slug: gymSlug,
        has_member_data: !!memberData
      },
      humanization_features: {
        emotional_analysis: true,
        conversation_memory: true,
        adaptive_personality: true,
        semantic_vad: true,
        voice_optimization: 'verse'
      }
    })

  } catch (error) {
    console.error('Erreur cr√©ation session voice:', error)
    return NextResponse.json(
      { error: 'Internal server error', details: error instanceof Error ? error.message : 'Unknown error' },
      { status: 500 }
    )
  }
} 