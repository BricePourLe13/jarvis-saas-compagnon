// Test de v√©rification post-correction NEXTAUTH_SECRET
console.log('üîß TEST POST-CORRECTION NEXTAUTH_SECRET\n');

console.log('üìã CHECKLIST:');
console.log('1. ‚úÖ Token Vercel fonctionnel');
console.log('2. ‚úÖ Projet jarvis-saas-compagnon trouv√©');
console.log('3. ‚úÖ Variables Supabase configur√©es');
console.log('4. üîÑ NEXTAUTH_SECRET √† corriger');
console.log('5. ‚è≥ Attendre red√©ploiement automatique\n');

console.log('üéØ APR√àS CORRECTION:');
console.log('- Red√©ploiement automatique (2-3 min)');
console.log('- Health Check API fonctionnera');
console.log('- Acc√®s depuis autres PC OK');
console.log('- Monitoring complet op√©rationnel\n');

console.log('üß™ TESTS √Ä FAIRE APR√àS:');
console.log('curl https://jarvis-saas-compagnon.vercel.app/api/health');
console.log('curl https://jarvis-saas-compagnon.vercel.app/');
console.log('\nüöÄ Votre infrastructure sera alors √† 10/10 !');

// Test de v√©rification de l'√©tat actuel
const https = require('https');

function quickHealthCheck() {
    console.log('\nüè• Test Health Check actuel...');
    const req = https.get('https://jarvis-saas-compagnon.vercel.app/api/health', (res) => {
        console.log(`Status: ${res.statusCode}`);
        if (res.statusCode === 200) {
            console.log('‚úÖ Health Check d√©j√† fonctionnel !');
        } else if (res.statusCode === 404) {
            console.log('‚è≥ En attente de red√©ploiement...');
        } else {
            console.log(`‚ö†Ô∏è Status inattendu: ${res.statusCode}`);
        }
    });
    
    req.on('error', (e) => {
        console.log(`‚ùå Erreur: ${e.message}`);
    });
    
    req.setTimeout(5000, () => {
        req.destroy();
        console.log('‚è∞ Timeout - Test termin√©');
    });
}

quickHealthCheck();
