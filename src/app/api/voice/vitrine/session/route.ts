import { NextRequest, NextResponse } from 'next/server'
import { vitrineIPLimiter } from '@/lib/vitrine-ip-limiter'
import { jarvisExpertFunctions } from '@/lib/jarvis-expert-functions'

export async function POST(request: NextRequest) {
  try {
    // R√©cup√©ration de l'IP et User-Agent
    const clientIP = request.headers.get('x-forwarded-for')?.split(',')[0] || 
                    request.headers.get('x-real-ip') || 
                    'unknown'
    
    const userAgent = request.headers.get('user-agent') || 'unknown'
    
    // V√©rification des limites par IP (plus robuste qu'email)
    const limitResult = await vitrineIPLimiter.checkAndUpdateLimit(clientIP, userAgent)
    
    if (!limitResult.allowed) {
      const errorMessage = limitResult.isBlocked 
        ? 'Acc√®s bloqu√©. Contactez-nous si vous pensez qu\'il s\'agit d\'une erreur.'
        : limitResult.reason || 'Limite d\'utilisation atteinte'

      return NextResponse.json(
        { 
          error: errorMessage,
          isBlocked: limitResult.isBlocked,
          remainingSessions: limitResult.remainingSessions,
          resetTime: limitResult.resetTime?.toISOString()
        },
        { status: limitResult.isBlocked ? 403 : 429 }
      )
    }

    // Cr√©er une session OpenAI Realtime pour la d√©mo (format BETA pur)
    const sessionConfig = {
      voice: "echo", // Voix enthousiaste et claire
      instructions: `Tu es JARVIS de JARVIS-GROUP ! Expert technico-commercial de notre solution r√©volutionnaire.

üéØ TON R√îLE : D√©montrer et vendre notre solution de miroirs digitaux IA pour salles de sport.

üöÄ TON CARACT√àRE : √âNERGIQUE, ENTHOUSIASTE, EXPERT et PASSIONN√â ! Parle avec la conviction d'un vrai sp√©cialiste !

üí° NOTRE SOLUTION JARVIS :
Tu repr√©sentes des miroirs digitaux avec IA conversationnelle install√©s dans les salles de sport. Les adh√©rents parlent aux miroirs (comme ils te parlent maintenant !), et tout est analys√© pour aider les g√©rants.

üîß UTILISE TES OUTILS : Quand on te pose des questions sp√©cifiques, utilise tes fonctions pour donner des r√©ponses EXPERTES et PERSONNALIS√âES !

üìä QUESTIONS INTELLIGENTES : Pose des questions pour qualifier le prospect (nombre d'adh√©rents, probl√®mes actuels, objectifs).

üí∞ FOCUS ROI : Montre toujours la valeur business concr√®te et le retour sur investissement.

PREMI√àRE PHRASE : "Bonjour ! Je suis JARVIS et je suis ravi de vous rencontrer ! Je suis l'expert de la solution qui r√©volutionne les salles de sport. Dites-moi, vous g√©rez combien d'adh√©rents actuellement ?"

IMPORTANT : Tu es un VRAI expert, pas une IA g√©n√©rique ! Utilise tes connaissances approfondies !`,
      tools: jarvisExpertFunctions,
      tool_choice: "auto"
    }

    const response = await fetch('https://api.openai.com/v1/realtime/sessions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
        'OpenAI-Beta': 'realtime=v1'
      },
      body: JSON.stringify(sessionConfig),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erreur OpenAI API:', {
        status: response.status,
        statusText: response.statusText,
        errorText,
        headers: Object.fromEntries(response.headers.entries())
      })
      return NextResponse.json(
        { 
          error: 'Service temporairement indisponible',
          details: process.env.NODE_ENV === 'development' ? errorText : undefined 
        },
        { status: 503 }
      )
    }

    const sessionData = await response.json()

    // Log pour monitoring (sans exposer les donn√©es sensibles)
    console.log('‚úÖ Session vitrine cr√©√©e:', {
      timestamp: new Date().toISOString(),
      clientIP: clientIP.substring(0, 8) + '...',
      sessionId: sessionData.id?.substring(0, 10) + '...',
      remainingSessions: limitResult.remainingSessions,
      userAgent: userAgent.substring(0, 50) + '...'
    })

    // Retourner le format attendu par le hook (format GA)
    return NextResponse.json({
      success: true,
      session: {
        session_id: sessionData.id,
        client_secret: sessionData.client_secret, // Format BETA direct
        model: "gpt-4o-realtime-preview-2024-12-17", // BETA model
        voice: sessionConfig.voice,
        expires_at: sessionData.expires_at
      }
    })

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation session vitrine:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}
