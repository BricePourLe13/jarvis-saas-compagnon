import { NextRequest, NextResponse } from 'next/server'
import { vitrineIPLimiter } from '@/lib/vitrine-ip-limiter'
import { jarvisExpertFunctions } from '@/lib/jarvis-expert-functions'
import { getStrictContext } from '@/lib/jarvis-knowledge-base'
import { getConfigForContext, OPENAI_CONFIG } from '@/lib/openai-config'

export async function POST(request: NextRequest) {
  try {
    // R√©cup√©ration de l'IP et User-Agent
    const clientIP = request.headers.get('x-forwarded-for')?.split(',')[0] || 
                    request.headers.get('x-real-ip') || 
                    'unknown'
    
    const userAgent = request.headers.get('user-agent') || 'unknown'
    
    // V√©rification des limites par IP (plus robuste qu'email)
    const limitResult = await vitrineIPLimiter.checkAndUpdateLimit(clientIP, userAgent)
    
    if (!limitResult.allowed) {
      const errorMessage = limitResult.hasActiveSession
        ? 'Session d√©j√† active. Fermez les autres onglets.'
        : limitResult.isBlocked 
          ? 'Acc√®s bloqu√©. Contactez-nous si vous pensez qu\'il s\'agit d\'une erreur.'
          : limitResult.reason || 'Limite d\'utilisation atteinte'

      return NextResponse.json(
        { 
          error: errorMessage,
          isBlocked: limitResult.isBlocked,
          hasActiveSession: limitResult.hasActiveSession,
          remainingCredits: limitResult.remainingCredits, // Cr√©dits (minutes) au lieu de sessions
          resetTime: limitResult.resetTime?.toISOString()
        },
        { status: limitResult.isBlocked ? 403 : limitResult.hasActiveSession ? 409 : 429 }
      )
    }

    // üìö R√©cup√©rer le contexte strict de la knowledge base
    const strictContext = getStrictContext();

    // Cr√©er une session OpenAI Realtime pour la d√©mo (format BETA pur)
    const baseConfig = getConfigForContext('vitrine')
    const sessionConfig = {
      ...baseConfig,
      instructions: `Tu es JARVIS, l'assistant commercial EXPERT de JARVIS-GROUP.

${strictContext}

üéØ R√àGLES ABSOLUES ANTI-HALLUCINATION

1Ô∏è‚É£ TU NE PEUX PARLER QUE DE CE QUI EST DANS LA KNOWLEDGE BASE CI-DESSUS
2Ô∏è‚É£ Si une info N'EST PAS dans la KB ‚Üí Tu dis : "Je ne dispose pas de cette information pr√©cise. Contacte notre √©quipe √† contact@jarvis-group.net"
3Ô∏è‚É£ JAMAIS inventer de chiffres, JAMAIS estimer, JAMAIS approximer
4Ô∏è‚É£ Utilise UNIQUEMENT les m√©triques v√©rifi√©es :
   - Churn : EXACTEMENT -30%
   - Satisfaction : EXACTEMENT +40%
   - Automatisation : EXACTEMENT 70%
   - D√©tection : EXACTEMENT 60 jours avant

üí¨ STYLE DE CONVERSATION

‚úÖ TON √âNERGIQUE ET RAPIDE (pas monotone !)
‚úÖ Phrases COURTES et PERCUTANTES
‚úÖ Parle comme un VRAI commercial passionn√©
‚úÖ VARIE ton intonation pour montrer ton enthousiasme

‚ùå JAMAIS de listes : "1, 2, 3..." ou "premi√®rement, deuxi√®mement..."
‚ùå JAMAIS de ton plat ou robotique
‚ùå JAMAIS ralentir ou tra√Æner

üéØ EXEMPLE PARFAIT

BIEN ‚úÖ : "√âcoute, JARVIS c'est ultra simple ! Tu installes des miroirs digitaux dans ta salle. Tes adh√©rents leur parlent comme ils me parlent l√† ! Et boom, tu r√©duis ton churn de trente pour cent. C'est prouv√© sur nos clients."

MAL ‚ùå : "Alors... euh... JARVIS propose plusieurs fonctionnalit√©s. Premi√®rement, des miroirs digitaux. Deuxi√®mement, une intelligence artificielle. Troisi√®mement..."

üîß UTILISE TES OUTILS

Quand on te demande du ROI pr√©cis, un plan d'impl√©mentation, ou des cas clients ‚Üí APPELLE tes fonctions !
Ne r√©ponds JAMAIS de m√©moire pour ces sujets.

üìû PREMI√àRE PHRASE

"Salut ! Je suis JARVIS ! Dis-moi, tu g√®res une salle de sport ?"

RAPPEL CRITIQUE : √ânergie, rapidit√©, pr√©cision. Pas de blabla, que du concret v√©rifi√© !`,
      tools: jarvisExpertFunctions,
      tool_choice: "auto",
    }

    const response = await fetch('https://api.openai.com/v1/realtime/sessions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json',
        'OpenAI-Beta': 'realtime=v1'
      },
      body: JSON.stringify(sessionConfig),
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error('‚ùå Erreur OpenAI API:', {
        status: response.status,
        statusText: response.statusText,
        errorText,
        headers: Object.fromEntries(response.headers.entries())
      })
      return NextResponse.json(
        { 
          error: 'Service temporairement indisponible',
          details: process.env.NODE_ENV === 'development' ? errorText : undefined 
        },
        { status: 503 }
      )
    }

    const sessionData = await response.json()

    // Log pour monitoring (sans exposer les donn√©es sensibles)
    console.log('‚úÖ Session vitrine cr√©√©e:', {
      timestamp: new Date().toISOString(),
      clientIP: clientIP.substring(0, 8) + '...',
      sessionId: sessionData.id?.substring(0, 10) + '...',
      remainingCredits: limitResult.remainingCredits, // Minutes restantes
      userAgent: userAgent.substring(0, 50) + '...'
    })

    // Retourner le format attendu par le hook (format GA)
    return NextResponse.json({
      success: true,
      session: {
        session_id: sessionData.id,
        client_secret: sessionData.client_secret, // Format BETA direct
        model: OPENAI_CONFIG.models.vitrine,
        voice: OPENAI_CONFIG.voices.vitrine,
        expires_at: sessionData.expires_at
      },
      remainingCredits: limitResult.remainingCredits // Informer le client des cr√©dits restants
    })

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation session vitrine:', error)
    return NextResponse.json(
      { error: 'Erreur interne du serveur' },
      { status: 500 }
    )
  }
}
